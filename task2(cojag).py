# -*- coding: utf-8 -*-
"""Task2(cojag).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yKI2W-NSjN6t6Xzger3uuZRuG5cQRIRm
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

df=pd.read_csv('survey-lung-cancer.csv')

df

# 1. Univariate Analysis for Numerical Column: AGE
print("\n--- Univariate Analysis for AGE ---")
age_mean = df['AGE'].mean()
age_median = df['AGE'].median()
# Calculate mode(s) for AGE.
age_modes = df['AGE'].mode().tolist()

print(f"Mean of AGE: {age_mean:.2f}")
print(f"Median of AGE: {age_median:.2f}")
print(f"Mode(s) of AGE: {age_modes}")

plt.figure(figsize=(10, 6))
sns.histplot(df['AGE'], kde=True, bins=15, color='skyblue')  #kde is kernel density estimation used to demostarte probability density
plt.title('Distribution of Age', fontsize=16)
plt.xlabel('Age', fontsize=12)
plt.ylabel('Frequency', fontsize=12)
plt.grid(axis='y', alpha=0.75)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.show()

print("\n--- Univariate Analysis for Categorical Columns ---")
categorical_cols = df.select_dtypes(include='object').columns.tolist()
for col in categorical_cols:
    print(f"\n--- Analysis for '{col}' ---")
    counts = df[col].value_counts()
    percentages = df[col].value_counts(normalize=True) * 100

    print(f"Value Counts:\n{counts}")
    print(f"Percentages:\n{percentages.round(2)}%")

plt.figure(figsize=(10, 6))
sns.barplot(x=counts.index, y=counts.values, hue=counts.index, palette='viridis', legend=False)
plt.title(f'Distribution of {col}', fontsize=16)
plt.xlabel(col, fontsize=12)
plt.ylabel('Count', fontsize=12)
plt.xticks(rotation=45, ha='right', fontsize=10)
plt.yticks(fontsize=10)
plt.grid(axis='y', alpha=0.75)
plt.tight_layout()

# --- Bivariate Analysis ---
# Create a copy for bivariate analysis transformations
df_bivariate = df.copy()
# Convert 'GENDER' to numerical (M:1, F:0)
df_bivariate['GENDER'] = df_bivariate['GENDER'].map({'M': 1, 'F': 0})
# Map 'YES'/'NO' columns to 1/0
yes_no_cols_for_mapping = [col for col in df_bivariate.columns if df_bivariate[col].dtype == 'object']
for col in yes_no_cols_for_mapping:
    df_bivariate[col] = df_bivariate[col].map({'YES': 1, 'NO': 0})
df_bivariate[col]

# Numerical vs Categorical
# gender vs age
plt.figure(figsize=(10, 6))
sns.boxplot(x='GENDER', y='AGE', data=df_bivariate, hue='GENDER', palette='pastel',legend=False)
plt.title('Age Distribution by Gender (0=Female, 1=Male)', fontsize=16)
plt.xlabel('Gender', fontsize=12)
plt.ylabel('Age', fontsize=12)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.grid(axis='y', alpha=0.75)
plt.show()

# This shows that both the gender have similar median ages, more variability in the middle age group of women than men

# LUNG_CANCER vs. AGE
plt.figure(figsize=(10, 6))
sns.boxplot(x='LUNG_CANCER', y='AGE', data=df_bivariate, hue='LUNG_CANCER', palette='pastel', legend=False)
plt.title('Age Distribution by Lung Cancer Status (0=No, 1=Yes)', fontsize=16)
plt.xlabel('Lung Cancer', fontsize=12)
plt.ylabel('Age', fontsize=12)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.grid(axis='y', alpha=0.75)
plt.show()
# without lung cancer apper to between 60 to 61, the median age for individual with lung cancer appera lower than without which is between 59-60.And median age for both yes or no are quite close.

# SMOKING vs. AGE
plt.figure(figsize=(10, 6))
sns.boxplot(x='SMOKING', y='AGE', data=df_bivariate, palette='pastel',hue='SMOKING',legend=False )
plt.title('Age Distribution by Smoking Status (0=No, 1=Yes)', fontsize=16)
plt.xlabel('Smoking', fontsize=12)
plt.ylabel('Age', fontsize=12)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.grid(axis='y', alpha=0.75)
plt.show()
# Smoking status is also very uch similar as from the lung cancer graph.

# CATEGORICAL VS CATEGORICAL
# GENDER vs. LUNG_CANCER
gender_lung_cancer_crosstab = pd.crosstab(df_bivariate['GENDER'], df_bivariate['LUNG_CANCER'])
print(gender_lung_cancer_crosstab)
plt.figure(figsize=(8, 6))
sns.heatmap(gender_lung_cancer_crosstab, annot=True, fmt='d', cmap='Blues', linewidths=.5, cbar_kws={'label': 'Count'})
plt.title('Gender vs. Lung Cancer', fontsize=16)
plt.xlabel('Lung Cancer (0=No, 1=Yes)', fontsize=12)
plt.ylabel('Gender (0=Female, 1=Male)', fontsize=12)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10, rotation=0)
plt.tight_layout()
# pd.crosstab COMPUTES FREQUENCY TABLE FOR TWO FACTORS
# This is heat map where it shows that the lightest colour is of the men not having cancer after that women that not has cancer while again women having cancer and in last men having cancer.

# SMOKING vs. LUNG_CANCER
print("\n--- SMOKING vs. LUNG_CANCER Crosstab ---")
smoking_lung_cancer_crosstab = pd.crosstab(df_bivariate['SMOKING'], df_bivariate['LUNG_CANCER'])
print(smoking_lung_cancer_crosstab)
plt.figure(figsize=(8, 6))
sns.heatmap(smoking_lung_cancer_crosstab, annot=True, fmt='d', cmap='Greens', linewidths=.5, cbar_kws={'label': 'Count'})
plt.title('Smoking vs. Lung Cancer', fontsize=16)
plt.xlabel('Lung Cancer (0=No, 1=Yes)', fontsize=12)
plt.ylabel('Smoking (0=No, 1=Yes)', fontsize=12)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10, rotation=0)
plt.tight_layout()

print("\n--- Bivariate Analysis: Numerical vs. Numerical ---")
print("Only 'AGE' is a numerical column in this dataset. Cannot perform numerical vs. numerical analysis with two distinct numerical columns.")

print("\n--- Analysis Complete ---")
print("All generated plots are saved as .png files in the current directory.")

# MULTIVARIATE ANALYSIS:
df_multivariate = df.copy()
# Convert 'GENDER' to numerical (M:1, F:0)
df_multivariate['GENDER'] = df_multivariate['GENDER'].map({'M': 1, 'F': 0})
# Map 'YES'/'NO' columns to 1/0
yes_no_cols_for_mapping = [col for col in df_multivariate.columns if df_multivariate[col].dtype == 'object']
for col in yes_no_cols_for_mapping:
    df_multivariate[col] = df_multivariate[col].map({'YES': 1, 'NO': 0})
df_multivariate[col]

# --- Multivariate Analysis ---
# Calculate the correlation matrix
correlation_matrix = df_multivariate.corr()

# Plotting the heatmap
plt.figure(figsize=(18, 15))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=.5)
plt.title('Correlation Matrix of All Variables', fontsize=20)
plt.xticks(rotation=90, fontsize=10)
plt.yticks(fontsize=10)
plt.tight_layout()

from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
# 2. Principal Component Analysis (PCA)
features = df_multivariate.columns.tolist()
X = df_multivariate[features]
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_scaled_df = pd.DataFrame(X_scaled, columns=features)
pca = PCA()
pca.fit(X_scaled)
explained_variance_ratio = pca.explained_variance_ratio_
print("Explained variance ratio by each principal component:")
for i, ratio in enumerate(explained_variance_ratio):
    print(f"PC{i+1}: {ratio:.4f}")

# Plotting explained variance
plt.figure(figsize=(10, 6))
plt.plot(range(1, len(explained_variance_ratio) + 1), np.cumsum(explained_variance_ratio), marker='o', linestyle='--')
plt.title('Explained Variance by Principal Components', fontsize=16)
plt.xlabel('Number of Principal Components', fontsize=12)
plt.ylabel('Cumulative Explained Variance', fontsize=12)
plt.grid(True)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.show()

principal_components = pca.transform(X_scaled)
principal_df = pd.DataFrame(data = principal_components,
                            columns = [f'PC{i+1}' for i in range(len(features))])

if 'LUNG_CANCER' in df_multivariate.columns:
    plt.figure(figsize=(10, 8))
    sns.scatterplot(x='PC1', y='PC2', hue=df_multivariate['LUNG_CANCER'], data=principal_df, palette='viridis', s=100, alpha=0.7)
    plt.title('PCA - First Two Principal Components (Colored by Lung Cancer)', fontsize=16)
    plt.xlabel('Principal Component 1', fontsize=12)
    plt.ylabel('Principal Component 2', fontsize=12)
    plt.grid(True)
    plt.xticks(fontsize=10)
    plt.yticks(fontsize=10)
    plt.show()

